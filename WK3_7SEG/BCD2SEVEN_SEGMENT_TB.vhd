-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.


-- Generated by Quartus Prime Version 18.1 (Build Build 625 09/12/2018)
-- Created on Thu Nov 29 10:46:11 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;


--  Entity Declaration
ENTITY TEST_BCD IS
END TEST_BCD;

ARCHITECTURE BENCH OF TEST_BCD IS
	COMPONENT BCD_2_7SEG_DECODER
		PORT (
				STATE	:	IN	STD_LOGIC_VECTOR(3 DOWNTO 0);
				SEG_A : OUT STD_LOGIC;
				SEG_B : OUT STD_LOGIC;
				SEG_C : OUT STD_LOGIC;
				SEG_D : OUT STD_LOGIC;
				SEG_E : OUT STD_LOGIC;
				SEG_F : OUT STD_LOGIC;
				SEG_G : OUT STD_LOGIC
				);
		END COMPONENT;
	
	SIGNAL STATE_STIM	:	STD_LOGIC_VECTOR(3 DOWNTO 0);
	
	SIGNAL SEG_A_IN	:	STD_LOGIC;
	SIGNAL SEG_B_IN	:	STD_LOGIC;
	SIGNAL SEG_C_IN	:	STD_LOGIC;
	SIGNAL SEG_D_IN	:	STD_LOGIC;
	SIGNAL SEG_E_IN	:	STD_LOGIC;
	SIGNAL SEG_F_IN	:	STD_LOGIC;
	SIGNAL SEG_G_IN	:	STD_LOGIC;
	
	SIGNAL SEG_COMB	:	STD_LOGIC_VECTOR(6 DOWNTO 0);
	
	BEGIN
	SEG_COMB <= SEG_A_IN & 			--Concatonate all inputs to one signal. 
					SEG_B_IN & 
					SEG_C_IN & 
					SEG_D_IN & 
					SEG_E_IN & 
					SEG_F_IN & 
					SEG_G_IN;
					
u1	:	BCD_2_7SEG_DECODER PORT MAP(
			STATE	=>	STATE_STIM,
			SEG_A	=>	SEG_A_IN,
			SEG_B	=>	SEG_B_IN,
			SEG_C	=>	SEG_C_IN,
			SEG_D	=>	SEG_D_IN,
			SEG_E	=>	SEG_E_IN,
			SEG_F	=>	SEG_F_IN,
			SEG_G	=>	SEG_G_IN
			);
		
	PROCESS
		BEGIN
		
		STATE_STIM <= "0000";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "1111110"
			REPORT	"INCORRECT OUTPUT IN BCD 0"
			SEVERITY	error;
			
		WAIT FOR 10 ns;		--Sim loop delay
		
		STATE_STIM <= "0001";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "0110000"
			REPORT	"INCORRECT OUTPUT IN BCD 1"
			SEVERITY error;
		
		WAIT FOR 10 ns;		--Sim loop delay
		
		STATE_STIM <= "0010";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "1101101"
			REPORT	"INCORRECT OUTPUT IN BCD 2"
			SEVERITY	error;
			
		WAIT FOR 10 ns;		--Sim loop delay
		
		STATE_STIM <= "0011";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "1111001"
			REPORT	"INCORRECT OUTPUT IN BCD 3"
			SEVERITY	error;
			
		WAIT FOR 10 ns;		--Sim loop delay
		
		STATE_STIM <= "0100";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "0110011"
			REPORT	"INCORRECT OUTPUT IN BCD 4"
			SEVERITY	error;
			
		WAIT FOR 10 ns;		--Sim loop delay
		
		STATE_STIM <= "0101";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "1011011"
			REPORT	"INCORRECT OUTPUT IN BCD 5"
			SEVERITY	error;
			
		WAIT FOR 10 ns;		--Sim loop delay
		
		STATE_STIM <= "0110";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "1011111"
			REPORT	"INCORRECT OUTPUT IN BCD 6"
			SEVERITY	error;
			
		WAIT FOR 10 ns;		--Sim loop delay
		
		STATE_STIM <= "0111";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "1110000"
			REPORT	"INCORRECT OUTPUT IN BCD 7"
			SEVERITY	error;
			
		WAIT FOR 10 ns;		--Sim loop delay
		
		STATE_STIM <= "1000";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "1111111"
			REPORT	"INCORRECT OUTPUT IN BCD 8"
			SEVERITY	error;
			
		WAIT FOR 10 ns;		--Sim loop delay
		
		STATE_STIM <= "1001";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "1111011"
			REPORT	"INCORRECT OUTPUT IN BCD 9"
			SEVERITY	error;
			
		WAIT FOR 10 ns;		--Sim loop delay
		
		STATE_STIM <= "1111";
		WAIT FOR 20 ns;		--Propogation delay
		ASSERT SEG_COMB = "XXXXXXX"
			REPORT	"INCORRECT OUTPUT IN BCD (OTHERS)"
			SEVERITY	error;
			
		ASSERT FALSE
			REPORT "TEST COMPLETED"
			SEVERITY	note;
		WAIT;
	END PROCESS;
	
END BENCH;
					
					
					