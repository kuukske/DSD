-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.


-- Generated by Quartus Prime Version 18.1 (Build Build 625 09/12/2018)
-- Created on Thu Nov 29 10:46:11 2018

LIBRARY ieee;
USE ieee.std_logic_1164.all;


--  Entity Declaration

ENTITY BCD_2_7SEG_DECODER IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
PORT
(
STATE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);

SEG_A : OUT STD_LOGIC;
SEG_B : OUT STD_LOGIC;
SEG_C : OUT STD_LOGIC;
SEG_D : OUT STD_LOGIC;
SEG_E : OUT STD_LOGIC;
SEG_F : OUT STD_LOGIC;
SEG_G : OUT STD_LOGIC
);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END BCD_2_7SEG_DECODER;


--  Architecture Body

ARCHITECTURE BCD_2_7SEG_DECODER_architecture OF BCD_2_7SEG_DECODER IS


BEGIN

BCD_2_7SEG_DECODER:	PROCESS(STATE)
	BEGIN
		CASE STATE IS
			WHEN	"0000"	=> 	--OUT = 0
			SEG_A		<=		'1'	AFTER	10 ns	;
			SEG_B		<=		'1'	AFTER	10 ns	;
			SEG_C		<=		'1'	AFTER	10 ns	;
			SEG_D		<=		'1'	AFTER	10 ns	;
			SEG_E		<=		'1'	AFTER	10 ns	;
			SEG_F		<=		'1'	AFTER	10 ns	;
			SEG_G		<=		'0'	AFTER	10 ns	;
			
			WHEN	"0001"	=>		--OUT 1
			SEG_A		<=		'0'	AFTER	10 ns	;
			SEG_B		<=		'1'	AFTER	10 ns	;
			SEG_C		<=		'1'	AFTER	10 ns	;
			SEG_D		<=		'0'	AFTER	10 ns	;
			SEG_E		<=		'0'	AFTER	10 ns	;
			SEG_F		<=		'0'	AFTER	10 ns	;
			SEG_G		<=		'0'	AFTER	10 ns	;
			
			WHEN	"0010"	=>		--OUT 2
			SEG_A		<=		'1'	AFTER	10 ns	;
			SEG_B		<=		'1'	AFTER	10 ns	;
			SEG_C		<=		'0'	AFTER	10 ns	;
			SEG_D		<=		'1'	AFTER	10 ns	;
			SEG_E		<=		'1'	AFTER	10 ns	;
			SEG_F		<=		'0'	AFTER	10 ns	;
			SEG_G		<=		'1'	AFTER	10 ns	;
			
			WHEN	"0011"	=>		--OUT 3
			SEG_A		<=		'1'	AFTER	10 ns	;
			SEG_B		<=		'1'	AFTER	10 ns	;
			SEG_C		<=		'1'	AFTER	10 ns	;
			SEG_D		<=		'1'	AFTER	10 ns	;
			SEG_E		<=		'0'	AFTER	10 ns	;
			SEG_F		<=		'0'	AFTER	10 ns	;
			SEG_G		<=		'1'	AFTER	10 ns	;
			
			WHEN	"0100"	=>		--OUT 4
			SEG_A		<=		'0'	AFTER	10 ns	;
			SEG_B		<=		'1'	AFTER	10 ns	;
			SEG_C		<=		'1'	AFTER	10 ns	;
			SEG_D		<=		'0'	AFTER	10 ns	;
			SEG_E		<=		'0'	AFTER	10 ns	;
			SEG_F		<=		'1'	AFTER	10 ns	;
			SEG_G		<=		'1'	AFTER	10 ns	;
			
			WHEN	"0101"	=>		--OUT 5
			SEG_A		<=		'1'	AFTER	10 ns	;
			SEG_B		<=		'0'	AFTER	10 ns	;
			SEG_C		<=		'1'	AFTER	10 ns	;
			SEG_D		<=		'1'	AFTER	10 ns	;
			SEG_E		<=		'0'	AFTER	10 ns	;
			SEG_F		<=		'1'	AFTER	10 ns	;
			SEG_G		<=		'1'	AFTER	10 ns	;
			
			WHEN	"0110"	=>		--OUT 6
			SEG_A		<=		'1'	AFTER	10 ns	;
			SEG_B		<=		'0'	AFTER	10 ns	;
			SEG_C		<=		'1'	AFTER	10 ns	;
			SEG_D		<=		'1'	AFTER	10 ns	;
			SEG_E		<=		'1'	AFTER	10 ns	;		
			SEG_F		<=		'1'	AFTER	10 ns	;
			SEG_G		<=		'1'	AFTER	10 ns	;
			
			WHEN	"0111"	=>		--OUT 7
			SEG_A		<=		'1'	AFTER	10 ns	;
			SEG_B		<=		'1'	AFTER	10 ns	;
			SEG_C		<=		'1'	AFTER	10 ns	;
			SEG_D		<=		'0'	AFTER	10 ns	;
			SEG_E		<=		'0'	AFTER	10 ns	;
			SEG_F		<=		'0'	AFTER	10 ns	;
			SEG_G		<=		'0'	AFTER	10 ns	;
			
			WHEN	"1000"	=>		--OUT 8
			SEG_A		<=		'1'	AFTER	10 ns	;
			SEG_B		<=		'1'	AFTER	10 ns	;
			SEG_C		<=		'1'	AFTER	10 ns	;
			SEG_D		<=		'1'	AFTER	10 ns	;
			SEG_E		<=		'1'	AFTER	10 ns	;
			SEG_F		<=		'1'	AFTER	10 ns	;
			SEG_G		<=		'1'	AFTER	10 ns	;
			
			WHEN	"1001"	=>		--OUT 8
			SEG_A		<=		'1'	AFTER	10 ns	;
			SEG_B		<=		'1'	AFTER	10 ns	;
			SEG_C		<=		'1'	AFTER	10 ns	;
			SEG_D		<=		'1'	AFTER	10 ns	;
			SEG_E		<=		'0'	AFTER	10 ns	;
			SEG_F		<=		'1'	AFTER	10 ns	;
			SEG_G		<=		'1'	AFTER	10 ns	;
			
			WHEN OTHERS		=>		--OUT INVALID
			SEG_A		<=		'X'	AFTER	10 ns	;
			SEG_B		<=		'X'	AFTER	10 ns	;
			SEG_C		<=		'X'	AFTER	10 ns	;
			SEG_D		<=		'X'	AFTER	10 ns	;
			SEG_E		<=		'X'	AFTER	10 ns	;
			SEG_F		<=		'X'	AFTER	10 ns	;
			SEG_G		<=		'X'	AFTER	10 ns	;
			
		END CASE;
	END PROCESS BCD_2_7SEG_DECODER;
		
			

END BCD_2_7SEG_DECODER_architecture;
